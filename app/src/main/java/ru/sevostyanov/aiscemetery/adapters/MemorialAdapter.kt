package ru.sevostyanov.aiscemetery.adapters

import android.content.res.ColorStateList
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.TextView
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.google.android.material.card.MaterialCardView
import ru.sevostyanov.aiscemetery.R
import ru.sevostyanov.aiscemetery.models.Memorial

class MemorialAdapter(
    private var memorials: List<Memorial>,
    private val onItemClick: (Memorial) -> Unit,
    private val onEditClick: (Memorial) -> Unit,
    private val onDeleteClick: (Memorial) -> Unit,
    private val onPrivacyClick: (Memorial) -> Unit,
    private val showControls: Boolean = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
) : RecyclerView.Adapter<MemorialAdapter.ViewHolder>() {

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val cardView: MaterialCardView = view as MaterialCardView
        val photoImage: ImageView = view.findViewById(R.id.image_photo)
        val nameTextView: TextView = view.findViewById(R.id.text_name)
        val datesTextView: TextView = view.findViewById(R.id.text_dates)
        val locationTextView: TextView = view.findViewById(R.id.text_location)
        val editButton: ImageButton = view.findViewById(R.id.button_edit)
        val deleteButton: ImageButton = view.findViewById(R.id.button_delete)
        val privacyButton: ImageButton = view.findViewById(R.id.button_privacy)
        val treeIndicator: TextView = view.findViewById(R.id.text_tree_indicator)
        val publicIndicator: TextView = view.findViewById(R.id.text_public_indicator)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_memorial, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val memorial = memorials[position]
        val context = holder.itemView.context
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        holder.nameTextView.text = memorial.fio
        holder.datesTextView.text = buildString {
            append("${memorial.birthDate}")
            memorial.deathDate?.let { append(" - $it") }
        }
        holder.locationTextView.text = memorial.mainLocation?.address ?: "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        val controlsVisibility = if (showControls) View.VISIBLE else View.GONE
        holder.editButton.visibility = controlsVisibility
        holder.deleteButton.visibility = controlsVisibility
        holder.privacyButton.visibility = controlsVisibility

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
        if (showControls) {
            holder.privacyButton.apply {
                visibility = View.VISIBLE
                setImageResource(if (memorial.isPublic) R.drawable.ic_public else R.drawable.ic_private)
                contentDescription = if (memorial.isPublic) "–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º" else "–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º"
            }
        } else {
            holder.privacyButton.visibility = View.GONE
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∏–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        if (memorial.isPublic) {
            holder.publicIndicator.visibility = View.VISIBLE
            holder.publicIndicator.text = "üåê –ü—É–±–ª–∏—á–Ω—ã–π"
            holder.cardView.apply {
                strokeColor = ContextCompat.getColor(context, android.R.color.holo_blue_light)
                strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
            }
        } else {
            holder.publicIndicator.visibility = View.GONE
            holder.cardView.apply {
                strokeColor = ContextCompat.getColor(context, android.R.color.transparent)
                strokeWidth = 0
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –¥—Ä–µ–≤—É
        holder.treeIndicator.visibility = if (memorial.treeId != null) View.VISIBLE else View.GONE
        memorial.treeId?.let {
            holder.treeIndicator.text = "üå≥ –î—Ä–µ–≤–æ #$it"
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        Glide.with(holder.itemView.context)
            .load(memorial.photoUrl)
            .placeholder(R.drawable.placeholder_photo)
            .error(R.drawable.placeholder_photo)
            .centerCrop()
            .into(holder.photoImage)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–∂–∞—Ç–∏–π
        holder.itemView.setOnClickListener { onItemClick(memorial) }
        if (showControls) {
            holder.editButton.setOnClickListener { onEditClick(memorial) }
            holder.deleteButton.setOnClickListener { onDeleteClick(memorial) }
            holder.privacyButton.setOnClickListener { onPrivacyClick(memorial) }
        }
    }

    override fun getItemCount() = memorials.size

    fun updateData(newMemorials: List<Memorial>) {
        println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ:")
        println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ—Ä–∏–∞–ª–æ–≤: ${newMemorials.size}")
        println("–°—Ç–∞—Ç—É—Å—ã –º–µ–º–æ—Ä–∏–∞–ª–æ–≤: ${newMemorials.map { "${it.id}: isPublic=${it.isPublic}" }}")
        memorials = newMemorials
        notifyDataSetChanged()
    }

    fun getMemorials(): List<Memorial> = memorials
} 