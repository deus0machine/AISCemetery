package ru.sevostyanov.aiscemetery.adapters

import android.content.res.ColorStateList
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.DiffUtil
import ru.sevostyanov.aiscemetery.R
import ru.sevostyanov.aiscemetery.models.Memorial
import ru.sevostyanov.aiscemetery.models.PublicationStatus
import ru.sevostyanov.aiscemetery.util.GlideHelper
import com.google.android.material.card.MaterialCardView

class MemorialAdapter(
    private var memorials: List<Memorial>,
    private val onItemClick: (Memorial) -> Unit,
    private val onEditClick: (Memorial) -> Unit,
    private val onDeleteClick: (Memorial) -> Unit,
    private val onPrivacyClick: (Memorial) -> Unit,
    private var showControls: Boolean = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
) : RecyclerView.Adapter<MemorialAdapter.ViewHolder>() {

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val cardView: MaterialCardView = view as MaterialCardView
        val photoImage: ImageView = view.findViewById(R.id.image_photo)
        val photoAwaitingApproval: ImageView = view.findViewById(R.id.photo_awaiting_approval)
        val nameTextView: TextView = view.findViewById(R.id.text_name)
        val datesTextView: TextView = view.findViewById(R.id.text_dates)
        val burialLocationTextView: TextView = view.findViewById(R.id.text_burial_location)
        val mainLocationTextView: TextView = view.findViewById(R.id.text_main_location)
        val editButton: ImageButton = view.findViewById(R.id.button_edit)
        val deleteButton: ImageButton = view.findViewById(R.id.button_delete)
        val privacyButton: ImageButton = view.findViewById(R.id.button_privacy)
        val treeIndicator: TextView = view.findViewById(R.id.text_tree_indicator)
        val publicIndicator: TextView = view.findViewById(R.id.text_public_indicator)
        val editorIndicator: TextView = view.findViewById(R.id.text_editor_indicator)
        val pendingChangesIndicator: TextView = view.findViewById(R.id.text_pending_changes)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_memorial, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val memorial = memorials[position]
        val context = holder.itemView.context
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        holder.nameTextView.text = memorial.fio
        holder.datesTextView.text = buildString {
            append("${memorial.birthDate}")
            memorial.deathDate?.let { append(" - $it") }
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        memorial.mainLocation?.let { location ->
            holder.mainLocationTextView.visibility = View.VISIBLE
            holder.mainLocationTextView.text = if (!location.address.isNullOrBlank()) {
                "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location.address}"
            } else {
                "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location.latitude}, ${location.longitude}"
            }
        } ?: run {
            holder.mainLocationTextView.visibility = View.GONE
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Å—Ç–æ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è
        memorial.burialLocation?.let { location ->
            holder.burialLocationTextView.visibility = View.VISIBLE
            holder.burialLocationTextView.text = if (!location.address.isNullOrBlank()) {
                "–ú–µ—Å—Ç–æ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è: ${location.address}"
            } else {
                "–ú–µ—Å—Ç–æ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è: ${location.latitude}, ${location.longitude}"
            }
        } ?: run {
            holder.burialLocationTextView.visibility = View.GONE
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        val controlsVisibility = if (showControls) View.VISIBLE else View.GONE
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ–º–æ—Ä–∏–∞–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        val isUnderModeration = memorial.publicationStatus == PublicationStatus.PENDING_MODERATION
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        holder.editButton.visibility = controlsVisibility
        if (isUnderModeration) {
            // –î–ª—è –º–µ–º–æ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏ —Å–µ—Ä–æ–π
            holder.editButton.isEnabled = false
            holder.editButton.alpha = 0.5f
            holder.editButton.setOnClickListener {
                Toast.makeText(holder.itemView.context, 
                    "–ú–µ–º–æ—Ä–∏–∞–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                    Toast.LENGTH_SHORT).show()
            }
        } else {
            // –û–±—ã—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –º–µ–º–æ—Ä–∏–∞–ª–æ–≤
            holder.editButton.isEnabled = true
            holder.editButton.alpha = 1.0f
            holder.editButton.setOnClickListener { onEditClick(memorial) }
        }
        
        holder.deleteButton.visibility = controlsVisibility
        holder.deleteButton.setOnClickListener { onDeleteClick(memorial) }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        val privacyButtonVisibility = if (showControls && 
            (memorial.publicationStatus == null || memorial.publicationStatus == PublicationStatus.DRAFT)) {
            View.VISIBLE
        } else {
            View.GONE
        }
        holder.privacyButton.visibility = privacyButtonVisibility
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if (privacyButtonVisibility == View.VISIBLE) {
            holder.privacyButton.apply {
                setImageResource(if (memorial.isPublic) R.drawable.ic_public else R.drawable.ic_private)
                contentDescription = if (memorial.isPublic) "–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º" else "–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º"
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏/—Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—Ç–∏–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        holder.publicIndicator.visibility = View.VISIBLE
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        when (memorial.publicationStatus) {
            PublicationStatus.PUBLISHED -> {
                holder.publicIndicator.text = "üåê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
                holder.cardView.apply {
                    strokeColor = ContextCompat.getColor(context, android.R.color.holo_green_dark)
                    strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
                }
            }
            PublicationStatus.PENDING_MODERATION -> {
                holder.publicIndicator.text = "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
                holder.publicIndicator.setTextColor(ContextCompat.getColor(context, android.R.color.holo_orange_dark))
                holder.cardView.apply {
                    strokeColor = ContextCompat.getColor(context, android.R.color.holo_orange_dark)
                    strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                    setCardBackgroundColor(ContextCompat.getColor(context, R.color.moderation_background))
                }
            }
            PublicationStatus.REJECTED -> {
                holder.publicIndicator.text = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
                holder.cardView.apply {
                    strokeColor = ContextCompat.getColor(context, android.R.color.holo_red_dark)
                    strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
                }
            }
            PublicationStatus.DRAFT -> {
                holder.publicIndicator.text = "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫"
                holder.cardView.apply {
                    strokeColor = ContextCompat.getColor(context, android.R.color.darker_gray)
                    strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
                }
            }
            null -> {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if (memorial.isPublic) {
                    holder.publicIndicator.text = "üåê –ü—É–±–ª–∏—á–Ω—ã–π"
                    holder.cardView.apply {
                        strokeColor = ContextCompat.getColor(context, android.R.color.holo_blue_light)
                        strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
                    }
                } else {
                    holder.publicIndicator.visibility = View.GONE
                    holder.cardView.apply {
                        strokeColor = ContextCompat.getColor(context, android.R.color.transparent)
                        strokeWidth = 0
                    }
                }
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –¥—Ä–µ–≤—É
        holder.treeIndicator.visibility = if (memorial.treeId != null) View.VISIBLE else View.GONE
        memorial.treeId?.let {
            holder.treeIndicator.text = "üå≥ –î—Ä–µ–≤–æ #$it"
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è
        if (memorial.isEditor) {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
            holder.editorIndicator.visibility = View.VISIBLE
            holder.editorIndicator.text = "üë• –°–æ–≤–º–µ—Å—Ç–Ω—ã–π (—Ä–µ–¥–∞–∫—Ç–æ—Ä)"
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            holder.editorIndicator.setTextColor(ContextCompat.getColor(context, R.color.gold))
            holder.cardView.strokeColor = ContextCompat.getColor(context, R.color.gold)
            holder.cardView.strokeWidth = context.resources.getDimensionPixelSize(R.dimen.card_stroke_width)
        } else if (showControls && !memorial.editors.isNullOrEmpty()) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü (showControls = true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π –º–µ–º–æ—Ä–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            // –∏ –º–µ–º–æ—Ä–∏–∞–ª –∏–º–µ–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
            holder.editorIndicator.visibility = View.VISIBLE
            holder.editorIndicator.text = "üë• –°–æ–≤–º–µ—Å—Ç–Ω—ã–π (–≤–ª–∞–¥–µ–ª–µ—Ü)"
            holder.editorIndicator.setTextColor(ContextCompat.getColor(context, R.color.teal_700))
        } else {
            holder.editorIndicator.visibility = View.GONE
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        holder.pendingChangesIndicator.visibility = if (memorial.pendingChanges) View.VISIBLE else View.GONE
        if (memorial.pendingChanges) {
            holder.pendingChangesIndicator.text = "‚ö†Ô∏è –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        }

        // –í—ã–±–æ—Ä URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        val photoUrl = when {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ —Ñ–æ—Ç–æ –∏ —ç—Ç–æ –Ω–∞—à –º–µ–º–æ—Ä–∏–∞–ª (–≤–ª–∞–¥–µ–ª–µ—Ü) –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä
            memorial.pendingPhotoUrl != null && (showControls || memorial.isEditor) -> {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Ñ–æ—Ç–æ
                holder.photoAwaitingApproval.visibility = View.VISIBLE
                memorial.pendingPhotoUrl
            }
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ
            else -> {
                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Ñ–æ—Ç–æ
                holder.photoAwaitingApproval.visibility = View.GONE
                memorial.photoUrl
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        if (!photoUrl.isNullOrBlank()) {
            println("MemorialAdapter: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL: $photoUrl")
            GlideHelper.loadImage(
                holder.itemView.context,
                photoUrl,
                holder.photoImage,
                R.drawable.placeholder_photo,
                R.drawable.placeholder_photo
            )
        } else {
            println("MemorialAdapter: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏–ª–∏ null, –∑–∞–≥—Ä—É–∂–∞–µ–º placeholder")
            holder.photoImage.setImageResource(R.drawable.placeholder_photo)
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–∂–∞—Ç–∏–π
        holder.itemView.setOnClickListener { onItemClick(memorial) }
        if (showControls) {
            holder.editButton.setOnClickListener { onEditClick(memorial) }
            holder.deleteButton.setOnClickListener { onDeleteClick(memorial) }
            holder.privacyButton.setOnClickListener { onPrivacyClick(memorial) }
        }
    }

    override fun getItemCount() = memorials.size

    fun updateData(newMemorials: List<Memorial>) {
        val diffCallback = object : DiffUtil.Callback() {
            override fun getOldListSize(): Int = memorials.size
            override fun getNewListSize(): Int = newMemorials.size

            override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
                return memorials[oldItemPosition].id == newMemorials[newItemPosition].id
            }

            override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
                val oldMemorial = memorials[oldItemPosition]
                val newMemorial = newMemorials[newItemPosition]
                return oldMemorial == newMemorial
            }
        }

        val diffResult = DiffUtil.calculateDiff(diffCallback)
        memorials = newMemorials
        diffResult.dispatchUpdatesTo(this)
    }

    fun updateControlsVisibility(showControls: Boolean) {
        this.showControls = showControls
        notifyDataSetChanged()
    }

    fun updateMemorial(updatedMemorial: Memorial) {
        println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª–∞ –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ: $updatedMemorial")
        val index = memorials.indexOfFirst { it.id == updatedMemorial.id }
        println("–ò–Ω–¥–µ–∫—Å –º–µ–º–æ—Ä–∏–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ: $index")
        if (index != -1) {
            val newList = memorials.toMutableList()
            newList[index] = updatedMemorial
            memorials = newList
            println("–°–ø–∏—Å–æ–∫ –º–µ–º–æ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $memorials")
            notifyItemChanged(index)
        } else {
            println("–ú–µ–º–æ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
        }
    }

    fun getMemorials(): List<Memorial> = memorials

    fun clear() {
        memorials = emptyList()
        notifyDataSetChanged()
    }
} 